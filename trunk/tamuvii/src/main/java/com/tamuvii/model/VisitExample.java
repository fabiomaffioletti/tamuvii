package com.tamuvii.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VisitExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table visit
     *
     * @ibatorgenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table visit
     *
     * @ibatorgenerated
     */
    protected List oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table visit
     *
     * @ibatorgenerated
     */
    public VisitExample() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table visit
     *
     * @ibatorgenerated
     */
    protected VisitExample(VisitExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table visit
     *
     * @ibatorgenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table visit
     *
     * @ibatorgenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table visit
     *
     * @ibatorgenerated
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table visit
     *
     * @ibatorgenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table visit
     *
     * @ibatorgenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table visit
     *
     * @ibatorgenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table visit
     *
     * @ibatorgenerated
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table visit
     *
     * @ibatorgenerated
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andVisitIsNull() {
            addCriterion("visit is null");
            return this;
        }

        public Criteria andVisitIsNotNull() {
            addCriterion("visit is not null");
            return this;
        }

        public Criteria andVisitEqualTo(Integer value) {
            addCriterion("visit =", value, "visit");
            return this;
        }

        public Criteria andVisitNotEqualTo(Integer value) {
            addCriterion("visit <>", value, "visit");
            return this;
        }

        public Criteria andVisitGreaterThan(Integer value) {
            addCriterion("visit >", value, "visit");
            return this;
        }

        public Criteria andVisitGreaterThanOrEqualTo(Integer value) {
            addCriterion("visit >=", value, "visit");
            return this;
        }

        public Criteria andVisitLessThan(Integer value) {
            addCriterion("visit <", value, "visit");
            return this;
        }

        public Criteria andVisitLessThanOrEqualTo(Integer value) {
            addCriterion("visit <=", value, "visit");
            return this;
        }

        public Criteria andVisitIn(List values) {
            addCriterion("visit in", values, "visit");
            return this;
        }

        public Criteria andVisitNotIn(List values) {
            addCriterion("visit not in", values, "visit");
            return this;
        }

        public Criteria andVisitBetween(Integer value1, Integer value2) {
            addCriterion("visit between", value1, value2, "visit");
            return this;
        }

        public Criteria andVisitNotBetween(Integer value1, Integer value2) {
            addCriterion("visit not between", value1, value2, "visit");
            return this;
        }

        public Criteria andVisitedIsNull() {
            addCriterion("visited is null");
            return this;
        }

        public Criteria andVisitedIsNotNull() {
            addCriterion("visited is not null");
            return this;
        }

        public Criteria andVisitedEqualTo(String value) {
            addCriterion("visited =", value, "visited");
            return this;
        }

        public Criteria andVisitedNotEqualTo(String value) {
            addCriterion("visited <>", value, "visited");
            return this;
        }

        public Criteria andVisitedGreaterThan(String value) {
            addCriterion("visited >", value, "visited");
            return this;
        }

        public Criteria andVisitedGreaterThanOrEqualTo(String value) {
            addCriterion("visited >=", value, "visited");
            return this;
        }

        public Criteria andVisitedLessThan(String value) {
            addCriterion("visited <", value, "visited");
            return this;
        }

        public Criteria andVisitedLessThanOrEqualTo(String value) {
            addCriterion("visited <=", value, "visited");
            return this;
        }

        public Criteria andVisitedLike(String value) {
            addCriterion("visited like", value, "visited");
            return this;
        }

        public Criteria andVisitedNotLike(String value) {
            addCriterion("visited not like", value, "visited");
            return this;
        }

        public Criteria andVisitedIn(List values) {
            addCriterion("visited in", values, "visited");
            return this;
        }

        public Criteria andVisitedNotIn(List values) {
            addCriterion("visited not in", values, "visited");
            return this;
        }

        public Criteria andVisitedBetween(String value1, String value2) {
            addCriterion("visited between", value1, value2, "visited");
            return this;
        }

        public Criteria andVisitedNotBetween(String value1, String value2) {
            addCriterion("visited not between", value1, value2, "visited");
            return this;
        }

        public Criteria andVisitorIsNull() {
            addCriterion("visitor is null");
            return this;
        }

        public Criteria andVisitorIsNotNull() {
            addCriterion("visitor is not null");
            return this;
        }

        public Criteria andVisitorEqualTo(String value) {
            addCriterion("visitor =", value, "visitor");
            return this;
        }

        public Criteria andVisitorNotEqualTo(String value) {
            addCriterion("visitor <>", value, "visitor");
            return this;
        }

        public Criteria andVisitorGreaterThan(String value) {
            addCriterion("visitor >", value, "visitor");
            return this;
        }

        public Criteria andVisitorGreaterThanOrEqualTo(String value) {
            addCriterion("visitor >=", value, "visitor");
            return this;
        }

        public Criteria andVisitorLessThan(String value) {
            addCriterion("visitor <", value, "visitor");
            return this;
        }

        public Criteria andVisitorLessThanOrEqualTo(String value) {
            addCriterion("visitor <=", value, "visitor");
            return this;
        }

        public Criteria andVisitorLike(String value) {
            addCriterion("visitor like", value, "visitor");
            return this;
        }

        public Criteria andVisitorNotLike(String value) {
            addCriterion("visitor not like", value, "visitor");
            return this;
        }

        public Criteria andVisitorIn(List values) {
            addCriterion("visitor in", values, "visitor");
            return this;
        }

        public Criteria andVisitorNotIn(List values) {
            addCriterion("visitor not in", values, "visitor");
            return this;
        }

        public Criteria andVisitorBetween(String value1, String value2) {
            addCriterion("visitor between", value1, value2, "visitor");
            return this;
        }

        public Criteria andVisitorNotBetween(String value1, String value2) {
            addCriterion("visitor not between", value1, value2, "visitor");
            return this;
        }

        public Criteria andDatevisitIsNull() {
            addCriterion("date_visit is null");
            return this;
        }

        public Criteria andDatevisitIsNotNull() {
            addCriterion("date_visit is not null");
            return this;
        }

        public Criteria andDatevisitEqualTo(Date value) {
            addCriterion("date_visit =", value, "datevisit");
            return this;
        }

        public Criteria andDatevisitNotEqualTo(Date value) {
            addCriterion("date_visit <>", value, "datevisit");
            return this;
        }

        public Criteria andDatevisitGreaterThan(Date value) {
            addCriterion("date_visit >", value, "datevisit");
            return this;
        }

        public Criteria andDatevisitGreaterThanOrEqualTo(Date value) {
            addCriterion("date_visit >=", value, "datevisit");
            return this;
        }

        public Criteria andDatevisitLessThan(Date value) {
            addCriterion("date_visit <", value, "datevisit");
            return this;
        }

        public Criteria andDatevisitLessThanOrEqualTo(Date value) {
            addCriterion("date_visit <=", value, "datevisit");
            return this;
        }

        public Criteria andDatevisitIn(List values) {
            addCriterion("date_visit in", values, "datevisit");
            return this;
        }

        public Criteria andDatevisitNotIn(List values) {
            addCriterion("date_visit not in", values, "datevisit");
            return this;
        }

        public Criteria andDatevisitBetween(Date value1, Date value2) {
            addCriterion("date_visit between", value1, value2, "datevisit");
            return this;
        }

        public Criteria andDatevisitNotBetween(Date value1, Date value2) {
            addCriterion("date_visit not between", value1, value2, "datevisit");
            return this;
        }
    }
}