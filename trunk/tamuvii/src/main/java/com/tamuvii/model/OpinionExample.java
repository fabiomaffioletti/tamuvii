package com.tamuvii.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OpinionExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table opinion
     *
     * @ibatorgenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table opinion
     *
     * @ibatorgenerated
     */
    protected List oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table opinion
     *
     * @ibatorgenerated
     */
    public OpinionExample() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table opinion
     *
     * @ibatorgenerated
     */
    protected OpinionExample(OpinionExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table opinion
     *
     * @ibatorgenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table opinion
     *
     * @ibatorgenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table opinion
     *
     * @ibatorgenerated
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table opinion
     *
     * @ibatorgenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table opinion
     *
     * @ibatorgenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table opinion
     *
     * @ibatorgenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table opinion
     *
     * @ibatorgenerated
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table opinion
     *
     * @ibatorgenerated
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andOpinionIsNull() {
            addCriterion("opinion is null");
            return this;
        }

        public Criteria andOpinionIsNotNull() {
            addCriterion("opinion is not null");
            return this;
        }

        public Criteria andOpinionEqualTo(Integer value) {
            addCriterion("opinion =", value, "opinion");
            return this;
        }

        public Criteria andOpinionNotEqualTo(Integer value) {
            addCriterion("opinion <>", value, "opinion");
            return this;
        }

        public Criteria andOpinionGreaterThan(Integer value) {
            addCriterion("opinion >", value, "opinion");
            return this;
        }

        public Criteria andOpinionGreaterThanOrEqualTo(Integer value) {
            addCriterion("opinion >=", value, "opinion");
            return this;
        }

        public Criteria andOpinionLessThan(Integer value) {
            addCriterion("opinion <", value, "opinion");
            return this;
        }

        public Criteria andOpinionLessThanOrEqualTo(Integer value) {
            addCriterion("opinion <=", value, "opinion");
            return this;
        }

        public Criteria andOpinionIn(List values) {
            addCriterion("opinion in", values, "opinion");
            return this;
        }

        public Criteria andOpinionNotIn(List values) {
            addCriterion("opinion not in", values, "opinion");
            return this;
        }

        public Criteria andOpinionBetween(Integer value1, Integer value2) {
            addCriterion("opinion between", value1, value2, "opinion");
            return this;
        }

        public Criteria andOpinionNotBetween(Integer value1, Integer value2) {
            addCriterion("opinion not between", value1, value2, "opinion");
            return this;
        }

        public Criteria andReviewIsNull() {
            addCriterion("review is null");
            return this;
        }

        public Criteria andReviewIsNotNull() {
            addCriterion("review is not null");
            return this;
        }

        public Criteria andReviewEqualTo(Integer value) {
            addCriterion("review =", value, "review");
            return this;
        }

        public Criteria andReviewNotEqualTo(Integer value) {
            addCriterion("review <>", value, "review");
            return this;
        }

        public Criteria andReviewGreaterThan(Integer value) {
            addCriterion("review >", value, "review");
            return this;
        }

        public Criteria andReviewGreaterThanOrEqualTo(Integer value) {
            addCriterion("review >=", value, "review");
            return this;
        }

        public Criteria andReviewLessThan(Integer value) {
            addCriterion("review <", value, "review");
            return this;
        }

        public Criteria andReviewLessThanOrEqualTo(Integer value) {
            addCriterion("review <=", value, "review");
            return this;
        }

        public Criteria andReviewIn(List values) {
            addCriterion("review in", values, "review");
            return this;
        }

        public Criteria andReviewNotIn(List values) {
            addCriterion("review not in", values, "review");
            return this;
        }

        public Criteria andReviewBetween(Integer value1, Integer value2) {
            addCriterion("review between", value1, value2, "review");
            return this;
        }

        public Criteria andReviewNotBetween(Integer value1, Integer value2) {
            addCriterion("review not between", value1, value2, "review");
            return this;
        }

        public Criteria andUserIsNull() {
            addCriterion("user is null");
            return this;
        }

        public Criteria andUserIsNotNull() {
            addCriterion("user is not null");
            return this;
        }

        public Criteria andUserEqualTo(Integer value) {
            addCriterion("user =", value, "user");
            return this;
        }

        public Criteria andUserNotEqualTo(Integer value) {
            addCriterion("user <>", value, "user");
            return this;
        }

        public Criteria andUserGreaterThan(Integer value) {
            addCriterion("user >", value, "user");
            return this;
        }

        public Criteria andUserGreaterThanOrEqualTo(Integer value) {
            addCriterion("user >=", value, "user");
            return this;
        }

        public Criteria andUserLessThan(Integer value) {
            addCriterion("user <", value, "user");
            return this;
        }

        public Criteria andUserLessThanOrEqualTo(Integer value) {
            addCriterion("user <=", value, "user");
            return this;
        }

        public Criteria andUserIn(List values) {
            addCriterion("user in", values, "user");
            return this;
        }

        public Criteria andUserNotIn(List values) {
            addCriterion("user not in", values, "user");
            return this;
        }

        public Criteria andUserBetween(Integer value1, Integer value2) {
            addCriterion("user between", value1, value2, "user");
            return this;
        }

        public Criteria andUserNotBetween(Integer value1, Integer value2) {
            addCriterion("user not between", value1, value2, "user");
            return this;
        }

        public Criteria andDateinsertedIsNull() {
            addCriterion("date_inserted is null");
            return this;
        }

        public Criteria andDateinsertedIsNotNull() {
            addCriterion("date_inserted is not null");
            return this;
        }

        public Criteria andDateinsertedEqualTo(Date value) {
            addCriterion("date_inserted =", value, "dateinserted");
            return this;
        }

        public Criteria andDateinsertedNotEqualTo(Date value) {
            addCriterion("date_inserted <>", value, "dateinserted");
            return this;
        }

        public Criteria andDateinsertedGreaterThan(Date value) {
            addCriterion("date_inserted >", value, "dateinserted");
            return this;
        }

        public Criteria andDateinsertedGreaterThanOrEqualTo(Date value) {
            addCriterion("date_inserted >=", value, "dateinserted");
            return this;
        }

        public Criteria andDateinsertedLessThan(Date value) {
            addCriterion("date_inserted <", value, "dateinserted");
            return this;
        }

        public Criteria andDateinsertedLessThanOrEqualTo(Date value) {
            addCriterion("date_inserted <=", value, "dateinserted");
            return this;
        }

        public Criteria andDateinsertedIn(List values) {
            addCriterion("date_inserted in", values, "dateinserted");
            return this;
        }

        public Criteria andDateinsertedNotIn(List values) {
            addCriterion("date_inserted not in", values, "dateinserted");
            return this;
        }

        public Criteria andDateinsertedBetween(Date value1, Date value2) {
            addCriterion("date_inserted between", value1, value2, "dateinserted");
            return this;
        }

        public Criteria andDateinsertedNotBetween(Date value1, Date value2) {
            addCriterion("date_inserted not between", value1, value2, "dateinserted");
            return this;
        }
    }
}