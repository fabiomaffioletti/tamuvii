package com.tamuvii.model;

import java.io.Serializable;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.proxy.HibernateProxy;
import org.springmodules.validation.bean.conf.loader.annotation.handler.Length;


/** 
 * Object mapping for hibernate-handled table: localized_data.
 * @author autogenerated
 */

@Entity
@Table(name = "localized_data", catalog = "tamuvii")
public class LocalizedData implements Cloneable, Serializable, ILocalizedData {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559009207L;
	
	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private Integer id = 0; // init for hibernate bug workaround
	/** Field mapping. */
	private String locale;
	/** Field mapping. */
	private String localizedPlot;
	/** Field mapping. */
	private String localizedTitle;
	/** Field mapping. */
	private Set<Movie> movie = new HashSet<Movie>();

	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public LocalizedData() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public LocalizedData(Integer id) {
		this.id = id;
	}
	
 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return LocalizedData.class;
	}
 

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column( name = "localized_data"  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
			SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: locale.
	 * @return A String object (this.locale)
	 */
	@Length(max=4)
	@Column( length = 4  )
	public String getLocale() {
		return this.locale;
		
	}
	

  
    /**  
     * Set the value related to the column: locale.
	 * @param locale the locale value you wish to set
	 */
	public void setLocale(final String locale) {
		this.locale = locale;
	}

    /**
     * Return the value associated with the column: localizedPlot.
	 * @return A String object (this.localizedPlot)
	 */
	@Column( name = "localized_plot" )
	public String getLocalizedPlot() {
		return this.localizedPlot;
		
	}
	

  
    /**  
     * Set the value related to the column: localizedPlot.
	 * @param localizedPlot the localizedPlot value you wish to set
	 */
	public void setLocalizedPlot(final String localizedPlot) {
		this.localizedPlot = localizedPlot;
	}

    /**
     * Return the value associated with the column: localizedTitle.
	 * @return A String object (this.localizedTitle)
	 */
	@Length(max=200)
	@Column( name = "localized_title", length = 200  )
	public String getLocalizedTitle() {
		return this.localizedTitle;
		
	}
	

  
    /**  
     * Set the value related to the column: localizedTitle.
	 * @param localizedTitle the localizedTitle value you wish to set
	 */
	public void setLocalizedTitle(final String localizedTitle) {
		this.localizedTitle = localizedTitle;
	}

    /**
     * Return the value associated with the column: movie.
	 * @return A Set&lt;Movie&gt; object (this.movie)
	 */
	@ManyToMany( fetch = FetchType.LAZY, mappedBy = "date" )
	public Set<Movie> getMovie() {
		return this.movie;
		
	}
	
	/**
	 * Adds a bi-directional link of type Movie to the set.
	 * 
	 * @param movie item to add
	 */
	public void addMovie(Movie movie) {
		movie.getDate().add(this);
		this.movie.add(movie);
	}

  
    /**  
     * Set the value related to the column: movie.
	 * @param movie the movie value you wish to set
	 */
	public void setMovie(final Set<Movie> movie) {
		this.movie = movie;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public LocalizedData clone() throws CloneNotSupportedException {
		super.clone();  // keep hierarchy
        final LocalizedData copy = new LocalizedData();

		copy.setId(this.getId());
		copy.setLocale(this.getLocale());
		copy.setLocalizedPlot(this.getLocalizedPlot());
		copy.setLocalizedTitle(this.getLocalizedTitle());
		copy.getMovie().addAll(this.getMovie());
		return copy;
	}


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("id: " + this.getId() + ", ");
		sb.append("locale: " + this.getLocale() + ", ");
		sb.append("localizedPlot: " + this.getLocalizedPlot() + ", ");
		sb.append("localizedTitle: " + this.getLocalizedTitle() + ", ");
		return sb.toString();		
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((hashCode == null) ? 0 : hashCode.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result + ((locale == null) ? 0 : locale.hashCode());
		result = prime * result
				+ ((localizedPlot == null) ? 0 : localizedPlot.hashCode());
		result = prime * result
				+ ((localizedTitle == null) ? 0 : localizedTitle.hashCode());
		result = prime * result + ((movie == null) ? 0 : movie.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		LocalizedData other = (LocalizedData) obj;
		if (hashCode == null) {
			if (other.hashCode != null)
				return false;
		} else if (!hashCode.equals(other.hashCode))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (locale == null) {
			if (other.locale != null)
				return false;
		} else if (!locale.equals(other.locale))
			return false;
		if (localizedPlot == null) {
			if (other.localizedPlot != null)
				return false;
		} else if (!localizedPlot.equals(other.localizedPlot))
			return false;
		if (localizedTitle == null) {
			if (other.localizedTitle != null)
				return false;
		} else if (!localizedTitle.equals(other.localizedTitle))
			return false;
		if (movie == null) {
			if (other.movie != null)
				return false;
		} else if (!movie.equals(other.movie))
			return false;
		return true;
	}


	
}
