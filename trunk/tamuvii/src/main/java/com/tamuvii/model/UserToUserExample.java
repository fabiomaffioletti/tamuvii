package com.tamuvii.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserToUserExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table user_to_user
     *
     * @ibatorgenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table user_to_user
     *
     * @ibatorgenerated
     */
    protected List oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table user_to_user
     *
     * @ibatorgenerated
     */
    public UserToUserExample() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table user_to_user
     *
     * @ibatorgenerated
     */
    protected UserToUserExample(UserToUserExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table user_to_user
     *
     * @ibatorgenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table user_to_user
     *
     * @ibatorgenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table user_to_user
     *
     * @ibatorgenerated
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table user_to_user
     *
     * @ibatorgenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table user_to_user
     *
     * @ibatorgenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table user_to_user
     *
     * @ibatorgenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table user_to_user
     *
     * @ibatorgenerated
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table user_to_user
     *
     * @ibatorgenerated
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andFirstIsNull() {
            addCriterion("first is null");
            return this;
        }

        public Criteria andFirstIsNotNull() {
            addCriterion("first is not null");
            return this;
        }

        public Criteria andFirstEqualTo(String value) {
            addCriterion("first =", value, "first");
            return this;
        }

        public Criteria andFirstNotEqualTo(String value) {
            addCriterion("first <>", value, "first");
            return this;
        }

        public Criteria andFirstGreaterThan(String value) {
            addCriterion("first >", value, "first");
            return this;
        }

        public Criteria andFirstGreaterThanOrEqualTo(String value) {
            addCriterion("first >=", value, "first");
            return this;
        }

        public Criteria andFirstLessThan(String value) {
            addCriterion("first <", value, "first");
            return this;
        }

        public Criteria andFirstLessThanOrEqualTo(String value) {
            addCriterion("first <=", value, "first");
            return this;
        }

        public Criteria andFirstLike(String value) {
            addCriterion("first like", value, "first");
            return this;
        }

        public Criteria andFirstNotLike(String value) {
            addCriterion("first not like", value, "first");
            return this;
        }

        public Criteria andFirstIn(List values) {
            addCriterion("first in", values, "first");
            return this;
        }

        public Criteria andFirstNotIn(List values) {
            addCriterion("first not in", values, "first");
            return this;
        }

        public Criteria andFirstBetween(String value1, String value2) {
            addCriterion("first between", value1, value2, "first");
            return this;
        }

        public Criteria andFirstNotBetween(String value1, String value2) {
            addCriterion("first not between", value1, value2, "first");
            return this;
        }

        public Criteria andSecondIsNull() {
            addCriterion("second is null");
            return this;
        }

        public Criteria andSecondIsNotNull() {
            addCriterion("second is not null");
            return this;
        }

        public Criteria andSecondEqualTo(String value) {
            addCriterion("second =", value, "second");
            return this;
        }

        public Criteria andSecondNotEqualTo(String value) {
            addCriterion("second <>", value, "second");
            return this;
        }

        public Criteria andSecondGreaterThan(String value) {
            addCriterion("second >", value, "second");
            return this;
        }

        public Criteria andSecondGreaterThanOrEqualTo(String value) {
            addCriterion("second >=", value, "second");
            return this;
        }

        public Criteria andSecondLessThan(String value) {
            addCriterion("second <", value, "second");
            return this;
        }

        public Criteria andSecondLessThanOrEqualTo(String value) {
            addCriterion("second <=", value, "second");
            return this;
        }

        public Criteria andSecondLike(String value) {
            addCriterion("second like", value, "second");
            return this;
        }

        public Criteria andSecondNotLike(String value) {
            addCriterion("second not like", value, "second");
            return this;
        }

        public Criteria andSecondIn(List values) {
            addCriterion("second in", values, "second");
            return this;
        }

        public Criteria andSecondNotIn(List values) {
            addCriterion("second not in", values, "second");
            return this;
        }

        public Criteria andSecondBetween(String value1, String value2) {
            addCriterion("second between", value1, value2, "second");
            return this;
        }

        public Criteria andSecondNotBetween(String value1, String value2) {
            addCriterion("second not between", value1, value2, "second");
            return this;
        }

        public Criteria andFriendIsNull() {
            addCriterion("friend is null");
            return this;
        }

        public Criteria andFriendIsNotNull() {
            addCriterion("friend is not null");
            return this;
        }

        public Criteria andFriendEqualTo(Integer value) {
            addCriterion("friend =", value, "friend");
            return this;
        }

        public Criteria andFriendNotEqualTo(Integer value) {
            addCriterion("friend <>", value, "friend");
            return this;
        }

        public Criteria andFriendGreaterThan(Integer value) {
            addCriterion("friend >", value, "friend");
            return this;
        }

        public Criteria andFriendGreaterThanOrEqualTo(Integer value) {
            addCriterion("friend >=", value, "friend");
            return this;
        }

        public Criteria andFriendLessThan(Integer value) {
            addCriterion("friend <", value, "friend");
            return this;
        }

        public Criteria andFriendLessThanOrEqualTo(Integer value) {
            addCriterion("friend <=", value, "friend");
            return this;
        }

        public Criteria andFriendIn(List values) {
            addCriterion("friend in", values, "friend");
            return this;
        }

        public Criteria andFriendNotIn(List values) {
            addCriterion("friend not in", values, "friend");
            return this;
        }

        public Criteria andFriendBetween(Integer value1, Integer value2) {
            addCriterion("friend between", value1, value2, "friend");
            return this;
        }

        public Criteria andFriendNotBetween(Integer value1, Integer value2) {
            addCriterion("friend not between", value1, value2, "friend");
            return this;
        }
    }
}