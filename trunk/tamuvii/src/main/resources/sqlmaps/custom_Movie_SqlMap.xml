<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >
<sqlMap namespace="custom_movie" >

  <resultMap id="shelfItemMap" class="com.tamuvii.pojo.ShelfItem" >
    <result column="movie" property="movie" jdbcType="INTEGER" />
    <result column="duration" property="duration" jdbcType="VARCHAR" />
    <result column="original_title" property="originalTitle" jdbcType="VARCHAR" />
    <result column="directorId" property="directorId" jdbcType="INTEGER" />
    <result column="director" property="director" jdbcType="VARCHAR" />
    <result column="release_date" property="releaseDate" jdbcType="TIMESTAMP" />
    <result column="date_added" property="dateAdded" jdbcType="TIMESTAMP" />
    <result column="date_viewed" property="dateViewed" jdbcType="TIMESTAMP" />
    <result column="mark" property="mark" jdbcType="INTEGER" />
  </resultMap>

  <resultMap id="socialMovieMap" class="com.tamuvii.pojo.SocialMovie" >
    <result column="movie" property="movie" jdbcType="INTEGER" />
    <result column="duration" property="duration" jdbcType="VARCHAR" />
    <result column="original_title" property="originalTitle" jdbcType="VARCHAR" />
    <result column="directorId" property="directorId" jdbcType="INTEGER" />
    <result column="director" property="director" jdbcType="VARCHAR" />
    <result column="release_date" property="releaseDate" jdbcType="TIMESTAMP" />
    <result column="numReviews" property="numReviews" jdbcType="INTEGER" />
    <result column="avgMark" property="avgMark" jdbcType="FLOAT" />
  </resultMap>
  
  <resultMap id="personalMovieMap" class="com.tamuvii.pojo.PersonalMovie" >
    <result column="movie" property="movie" jdbcType="INTEGER" />
    <result column="duration" property="duration" jdbcType="VARCHAR" />
    <result column="original_title" property="originalTitle" jdbcType="VARCHAR" />
    <result column="directorId" property="directorId" jdbcType="INTEGER" />
    <result column="director" property="director" jdbcType="VARCHAR" />
    <result column="release_date" property="releaseDate" jdbcType="TIMESTAMP" />
    <result column="date_added" property="dateAdded" jdbcType="TIMESTAMP" />
    <result column="date_viewed" property="dateViewed" jdbcType="TIMESTAMP" />
    <result column="mark" property="mark" jdbcType="INTEGER" />
  </resultMap>
  
  <resultMap id="detailedReviewMap" class="com.tamuvii.pojo.DetailedReview" >
    <result column="review" jdbcType="INTEGER" property="review" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="movie" jdbcType="INTEGER" property="movie" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="review_text" jdbcType="VARCHAR" property="reviewtext" />
    <result column="ok" jdbcType="INTEGER" property="ok" />
    <result column="ko" jdbcType="INTEGER" property="ko" />
    <result column="date_inserted" jdbcType="TIMESTAMP" property="dateinserted" />
    <result column="numOpinions" property="numOpinions" jdbcType="INTEGER" />
  </resultMap>
  
  <resultMap id="movieUser" class="com.tamuvii.pojo.MovieUser">
        <result property="movieUser" jdbcType="INTEGER" column="movieUser"/>
        <result property="username" jdbcType="VARCHAR" column="username"/>
        <result column="mark" jdbcType="INTEGER" property="mark" />
        <result property="imageLink" jdbcType="VARCHAR" column="imageLink"/>
  </resultMap>
  
  <resultMap id="personalMovieIdAndWishedFlag" class="com.tamuvii.pojo.PersonalMovieIdAndWishedFlag" >
	    <result column="movie" property="movie" jdbcType="INTEGER" />
	    <result column="wished" property="wished" jdbcType="VARCHAR" />
  </resultMap>
  
  <resultMap id="userNeighbor" class="com.tamuvii.pojo.UserNeighbor">
        <result property="id" column="id"/>
        <result property="username" column="username"/>
		<result property="email" column="email"/>
        <result property="website" column="website"/>
        <result property="websiteTitle" column="websiteTitle"/>
        <result property="address.city" column="city"/>
        <result property="address.country" column="country"/>
        <result property="imageLink" column="imageLink"/>
   </resultMap>
   
  <select id="getShelfByUsername" resultMap="shelfItemMap" parameterClass="java.lang.String" >
		select				m.movie, 
							m.duration, 
							m.original_title,
							d.director as directorId, 
							CONCAT(d.name, " ", d.surname) as director, 
							m.release_date, 
							um.date_added, 
							um.date_viewed, 
							um.mark
							
		from 				user_to_movie um			inner join movie m
							on um.movie = m.movie 		inner join director d
							on d.director = m.director 	inner join app_user u
							on u.username = um.username
							
		where				u.username = #username#
		and					um.wished = '0'
		
  </select>
  
  <select id="getWishedMoviesByUsername" resultMap="shelfItemMap" parameterClass="java.lang.String" >
		select				m.movie, 
							m.duration, 
							m.original_title,
							d.director as directorId, 
							CONCAT(d.name, " ", d.surname) as director, 
							m.release_date, 
							um.date_added, 
							um.date_viewed, 
							um.mark
							
		from 				user_to_movie um			inner join movie m
							on um.movie = m.movie 		inner join director d
							on d.director = m.director 	inner join app_user u
							on u.username = um.username
							
		where				u.username = #username#
		and					um.wished = '1'
		
  </select>
  
  <select id="getSocialMovieDetails" resultMap="socialMovieMap" parameterClass="java.lang.Integer">
  		select				m.movie, 
							m.duration, 
							m.original_title,
							d.director as directorId, 
							CONCAT(d.name, " ", d.surname) as director, 
							m.release_date,
							count(distinct r.review) as numReviews,
							avg(um.mark) as avgMark
							
		from 				movie m 					left join review r
							on	m.movie = r.movie 		inner join director d
							on m.director = d.director	inner join user_to_movie um 
							on um.movie = m.movie
							
		where m.movie = #movie#
  </select>
  
  <select id="getPersonalMovieDetails" resultMap="personalMovieMap" parameterClass="com.tamuvii.pojo.queryfilter.PersonalMovieFilterMap">
  		select				m.movie, 
							m.duration, 
							m.original_title,
							d.director as directorId, 
							CONCAT(d.name, " ", d.surname) as director, 
							m.release_date, 
							um.date_added, 
							um.date_viewed, 
							um.mark
							
		from 				user_to_movie um			inner join movie m
							on um.movie = m.movie 		inner join director d
							on d.director = m.director 	inner join app_user u
							on u.username = um.username 			
							
		where m.movie = #movie# and u.username = #username#
  </select>
  
  
  <select id="getDetailedReviewsByMovie" resultMap="detailedReviewMap" parameterClass="java.lang.Integer">
  		select				r.review,
  							r.username,
  							r.movie,
  							r.title,
  							r.review_text,
  							r.ok as ok,
  							r.ko as ko,
  							r.date_inserted,
							count(o.opinion) as numOpinions

		from				review r		left join		opinion o
						on	r.review = o.review
		
		where				r.movie = #movie#
		group by			r.review
  </select>
  
  <select id="getUsersByMovie" resultMap="movieUser" parameterClass="java.lang.Integer">
		select			u.id as movieUser,
						u.username,
						um.mark,
						u.image as imageLink
					
		from			app_user u		inner join		user_to_movie um
						on u.username = um.username
						
		where			um.movie = #movie#
		group by 		u.username  
  </select>
  
  
  <select id="searchSocialMovies" resultMap="socialMovieMap" parameterClass="com.tamuvii.pojo.SearchMovieFilter" >
		select				m.movie, 
							m.duration, 
							m.original_title,
							d.director as directorId, 
							CONCAT(d.name, " ", d.surname) as director, 
							m.release_date,
							count(distinct r.review) as numReviews,
							avg(um.mark) as avgMark
							
		from 				movie m 					left join review r
							on	m.movie = r.movie 		inner join director d
							on m.director = d.director	inner join user_to_movie um 
							on um.movie = m.movie
							
		<dynamic prepend="WHERE">
	         <isNotNull property="filter" prepend="and">
                  <iterate conjunction="and" property="filter" removeFirstPrepend="true">
                       (
                       m.original_title like #filter[]#
                       or
                       d.surname like #filter[]#
                       or
                       d.name like #filter[]#
                       )
                  </iterate>
	        </isNotNull>
	    </dynamic>								
							
		group by m.movie
  </select>
  
  <select id="getPersonalMoviesIds" resultClass="java.lang.Integer" parameterClass="java.lang.String" >
  		select			um.movie
		from			user_to_movie um
		where			um.username = #username#
  </select>
  
  <select id="getShelfMoviesIds" resultClass="java.lang.Integer" parameterClass="java.lang.String" >
  		select			um.movie
		from			user_to_movie um
		where			um.username = #username#
		and				um.wished = '0'
  </select>
  
  <select id="getWishedMoviesIds" resultClass="java.lang.Integer" parameterClass="java.lang.String" >
  		select			um.movie
		from			user_to_movie um
		where			um.username = #username#
		and				um.wished = '1'
  </select>
  
  <select id="getPersonalMoviesIdsAndWishedFlags" resultMap="personalMovieIdAndWishedFlag" parameterClass="java.lang.String" >
  		select			um.movie,
  						um.wished
		from			user_to_movie um
		where			um.username = #username#
  </select>
  
  
  <select id="getUserFriends" resultMap="userNeighbor" parameterClass="java.lang.String" >
		select 			u.id,
					 	u.username, 
						u.email,
						u.website,
						u.website_title as websiteTitle,
						u.city,
						u.country,
						u.image as imageLink
			
		from 			user_to_user uu 		inner join 		app_user u
						on uu.second = u.username
		
		where 			uu.first = #username#
		and 			uu.friend = 1
  </select>
  
  <select id="getUserNeighborhoods" resultMap="userNeighbor" parameterClass="java.lang.String" >
		select 			u.id,
					 	u.username, 
						u.email,
						u.website,
						u.website_title as websiteTitle,
						u.city,
						u.country,
						u.image as imageLink
			
		from 			user_to_user uu 		inner join 		app_user u
						on uu.second = u.username
		
		where 			uu.first = #username#
		and 			uu.friend = 0
  </select>
  
  <select id="getUserPublicInfo" resultMap="userNeighbor" parameterClass="java.lang.String" >
		select 			u.id,
					 	u.username, 
						u.email,
						u.website,
						u.website_title as websiteTitle,
						u.city,
						u.country,
						u.image as imageLink
			
		from 			app_user u
		
		where 			u.username = #username#  
  </select>
  
</sqlMap>