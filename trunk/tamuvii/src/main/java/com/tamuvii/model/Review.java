package com.tamuvii.model;

import java.io.Serializable;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.springmodules.validation.bean.conf.loader.annotation.handler.Length;


/** 
 * Object mapping for hibernate-handled table: review.
 * @author autogenerated
 */

@Entity
@Table(name = "review", catalog = "tamuvii")
public class Review implements Cloneable, Serializable {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559009203L;
	
	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private Integer id = 0; // init for hibernate bug workaround
	/** Field mapping. */
	private String reviewText;
	/** Field mapping. */
//	private List<Movie> movie = new ArrayList<Movie>();

	/** Field mapping. */
	private Set<Opinion> opinion = new HashSet<Opinion>();

	/** Field mapping. */
	private String title;
	/** Field mapping. */
	private User user;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Review() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Review(Integer id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param id Integer object;
	 * @param reviewText String object;
	 * @param user Integer object;
	 */
	public Review(Integer id, String reviewText, User user) {

		this.id = id;
		this.reviewText = reviewText;
		this.user = user;
	}
	
 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Review.class;
	}
 

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column( name = "review"  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
			SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: reviewText.
	 * @return A String object (this.reviewText)
	 */
	@Column( name = "review_text" )
	public String getReviewText() {
		return this.reviewText;
		
	}
	

  
    /**  
     * Set the value related to the column: reviewText.
	 * @param reviewText the reviewText value you wish to set
	 */
	public void setReviewText(final String reviewText) {
		this.reviewText = reviewText;
	}

//	@ManyToMany( mappedBy = "review" )
//	public List<Movie> getMovie() {
//		return this.movie;
//		
//	}
//	public void addMovie(Movie movie) {
//		movie.getReview().add(this);
//		this.movie.add(movie);
//	}
//	public void setMovie(final List<Movie> movie) {
//		this.movie = movie;
//	}
//	

    /**
     * Return the value associated with the column: opinion.
	 * @return A Set&lt;Opinion&gt; object (this.opinion)
	 */
 	@OneToMany( mappedBy = "review"  )
	public Set<Opinion> getOpinion() {
		return this.opinion;
		
	}
	
	/**
	 * Adds a bi-directional link of type Opinion to the opinion set.
	 * @param opinion item to add
	 */
	public void addOpinion(Opinion opinion) {
		opinion.setReview(this);
		this.opinion.add(opinion);
	}

  
    /**  
     * Set the value related to the column: opinion.
	 * @param opinion the opinion value you wish to set
	 */
	public void setOpinion(final Set<Opinion> opinion) {
		this.opinion = opinion;
	}

    /**
     * Return the value associated with the column: title.
	 * @return A String object (this.title)
	 */
	@Length(max=100)
	@Column( length = 100  )
	public String getTitle() {
		return this.title;
		
	}
	

  
    /**  
     * Set the value related to the column: title.
	 * @param title the title value you wish to set
	 */
	public void setTitle(final String title) {
		this.title = title;
	}

    /**
     * Return the value associated with the column: user.
	 * @return A Integer object (this.user)
	 */
	@ManyToOne()
	@JoinColumn(name="user")
	public User getUser() {
		return this.user;
		
	}
	

  
    /**  
     * Set the value related to the column: user.
	 * @param user the user value you wish to set
	 */
	public void setUser(final User user) {
		this.user = user;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Review clone() throws CloneNotSupportedException {
		super.clone();  // keep hierarchy
        final Review copy = new Review();

		copy.setId(this.getId());
		copy.setReviewText(this.getReviewText());
//		copy.getMovie().addAll(this.getMovie());
		copy.getOpinion().addAll(this.getOpinion());
		copy.setTitle(this.getTitle());
		copy.setUser(this.getUser());
		return copy;
	}


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("id: " + this.getId() + ", ");
		sb.append("reviewText: " + this.getReviewText() + ", ");
		sb.append("title: " + this.getTitle() + ", ");
		sb.append("user: " + this.getUser());
		return sb.toString();		
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((hashCode == null) ? 0 : hashCode.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
//		result = prime * result + ((movie == null) ? 0 : movie.hashCode());
		result = prime * result + ((opinion == null) ? 0 : opinion.hashCode());
		result = prime * result
				+ ((reviewText == null) ? 0 : reviewText.hashCode());
		result = prime * result + ((title == null) ? 0 : title.hashCode());
		result = prime * result + ((user == null) ? 0 : user.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Review other = (Review) obj;
		if (hashCode == null) {
			if (other.hashCode != null)
				return false;
		} else if (!hashCode.equals(other.hashCode))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
//		if (movie == null) {
//			if (other.movie != null)
//				return false;
//		} else if (!movie.equals(other.movie))
//			return false;
		if (opinion == null) {
			if (other.opinion != null)
				return false;
		} else if (!opinion.equals(other.opinion))
			return false;
		if (reviewText == null) {
			if (other.reviewText != null)
				return false;
		} else if (!reviewText.equals(other.reviewText))
			return false;
		if (title == null) {
			if (other.title != null)
				return false;
		} else if (!title.equals(other.title))
			return false;
		if (user == null) {
			if (other.user != null)
				return false;
		} else if (!user.equals(other.user))
			return false;
		return true;
	}


	
}