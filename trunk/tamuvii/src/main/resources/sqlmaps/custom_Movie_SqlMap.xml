<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >
<sqlMap namespace="custom_movie" >

  <resultMap id="socialMovieMap" class="com.tamuvii.pojo.SocialMovie" >
    <result column="movie" property="movie" jdbcType="INTEGER" />
    <result column="duration" property="duration" jdbcType="VARCHAR" />
    <result column="original_title" property="originalTitle" jdbcType="VARCHAR" />
    <result column="directorId" property="directorId" jdbcType="INTEGER" />
    <result column="director" property="director" jdbcType="VARCHAR" />
    <result column="release_date" property="releaseDate" jdbcType="TIMESTAMP" />
    <result column="numReviews" property="numReviews" jdbcType="INTEGER" />
    <result column="avgMark" property="avgMark" jdbcType="FLOAT" />
  </resultMap>
  
  <resultMap id="personalMovieMap" class="com.tamuvii.pojo.PersonalMovie" >
    <result column="movie" property="movie" jdbcType="INTEGER" />
    <result column="duration" property="duration" jdbcType="VARCHAR" />
    <result column="original_title" property="originalTitle" jdbcType="VARCHAR" />
    <result column="directorId" property="directorId" jdbcType="INTEGER" />
    <result column="director" property="director" jdbcType="VARCHAR" />
    <result column="release_date" property="releaseDate" jdbcType="TIMESTAMP" />
    <result column="date_added" property="dateAdded" jdbcType="TIMESTAMP" />
    <result column="date_viewed" property="dateViewed" jdbcType="TIMESTAMP" />
    <result column="mark" property="mark" jdbcType="INTEGER" />
  </resultMap>
  
  <resultMap id="movieUser" class="com.tamuvii.pojo.MovieUser">
        <result property="movieUser" jdbcType="INTEGER" column="movieUser"/>
        <result property="username" jdbcType="VARCHAR" column="username"/>
        <result column="mark" jdbcType="INTEGER" property="mark" />
        <result property="imageLink" jdbcType="VARCHAR" column="imageLink"/>
  </resultMap>
  
  
  <select id="getSocialMovieDetails" resultMap="socialMovieMap" parameterClass="java.lang.Integer">
  		select				m.movie, 
							m.duration, 
							m.original_title,
							d.director as directorId, 
							CONCAT(d.name, " ", d.surname) as director, 
							m.release_date,
							count(distinct r.review) as numReviews,
							avg(um.mark) as avgMark
							
		from 				movie m 					left join review r
							on	m.movie = r.movie 		inner join director d
							on m.director = d.director	inner join user_to_movie um 
							on um.movie = m.movie
							
		where m.movie = #movie#
  </select>
  
  <!-- getSocialMovieDetails con il filtro sul locale scelto dall'utente e il numero di utenti che hanno il film
  
  		select				m.movie, 
							m.duration, 
							m.original_title,
							d.director as directorId, 
							CONCAT(d.name, " ", d.surname) as director, 
							m.release_date,
							count(distinct r.review) as numReviews,
							avg(um.mark) as avgMark,
							count(distinct au.id) as numUsers
														
		from 				movie m												inner join 		user_to_movie um 
							on um.movie = m.movie 								inner join 		app_user au
							on au.username = um.username						left join 		review r
							on m.movie = r.movie and au.username = r.username	inner join 		director d
							on m.director = d.director	
							
		where m.movie = -18 and au.country = 'IT'
  
   -->
  
  <select id="getPersonalMovieDetails" resultMap="personalMovieMap" parameterClass="com.tamuvii.pojo.queryfilter.PersonalMovieFilterMap">
  		select				m.movie, 
							m.duration, 
							m.original_title,
							d.director as directorId, 
							CONCAT(d.name, " ", d.surname) as director, 
							m.release_date, 
							um.date_added, 
							um.date_viewed, 
							um.mark
							
		from 				user_to_movie um			inner join movie m
							on um.movie = m.movie 		inner join director d
							on d.director = m.director 	inner join app_user u
							on u.username = um.username 			
							
		where m.movie = #movie# and u.username = #username#
  </select>
  
  <select id="getUsersByMovie" resultMap="movieUser" parameterClass="java.lang.Integer">
		select			u.id as movieUser,
						u.username,
						um.mark,
						u.image as imageLink
					
		from			app_user u		inner join		user_to_movie um
						on u.username = um.username
						
		where			um.movie = #movie#
		group by 		u.username  
  </select>
  
  
  <select id="searchSocialMovies" resultMap="socialMovieMap" parameterClass="com.tamuvii.pojo.SearchMovieFilter" >
		select				m.movie, 
							m.duration, 
							m.original_title,
							d.director as directorId, 
							CONCAT(d.name, " ", d.surname) as director, 
							m.release_date,
							count(distinct r.review) as numReviews,
							avg(um.mark) as avgMark
							
		from 				movie m 					left join review r
							on	m.movie = r.movie 		inner join director d
							on m.director = d.director	inner join user_to_movie um 
							on um.movie = m.movie
							
		<dynamic prepend="WHERE">
	         <isNotNull property="filter" prepend="and">
                  <iterate conjunction="and" property="filter" removeFirstPrepend="true">
                       (
                       m.original_title like #filter[]#
                       or
                       d.surname like #filter[]#
                       or
                       d.name like #filter[]#
                       )
                  </iterate>
	        </isNotNull>
	    </dynamic>								
							
		group by m.movie
  </select>
  
</sqlMap>