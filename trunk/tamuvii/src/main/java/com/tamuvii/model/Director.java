package com.tamuvii.model;
import java.io.Serializable;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;


/** 
 * Object mapping for hibernate-handled table: director.
 * @author autogenerated
 */

@Entity
@Table(name = "director", catalog = "tamuvii")
public  class Director implements Cloneable, Serializable {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559009209L;


	/** Field mapping. */
	private Date dob;
	/** Field mapping. */
	private Integer id = 0; // init for hibernate bug workaround
	/** Field mapping. */
	private String name;
	/** Field mapping. */
	private String surname;
	/** Field mapping. */
	private Set<Movie> movie = new HashSet<Movie>();

	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Director() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Director(Integer id) {
		this.id = id;
	}
	
 


    /**
     * Return the value associated with the column: dob.
	 * @return A Date object (this.dob)
	 */
	
	public Date getDob() {
		return this.dob;
	}
	

  
    /**  
     * Set the value related to the column: dob.
	 * @param dob the dob value you wish to set
	 */
	public void setDob(final Date dob) {
		this.dob = dob;
	}


    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@Column( name = "director", nullable = false  )
	@GeneratedValue(strategy = GenerationType.AUTO)
	public Integer getId() {
		return this.id;
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		this.id = id;
	}


    /**
     * Return the value associated with the column: name.
	 * @return A String object (this.name)
	 */
	@Column( length = 80  )
	public String getName() {
		return this.name;
	}
	

  
    /**  
     * Set the value related to the column: name.
	 * @param name the name value you wish to set
	 */
	public void setName(final String name) {
		this.name = name;
	}


    /**
     * Return the value associated with the column: surname.
	 * @return A String object (this.surname)
	 */
	@Column( length = 80  )
	public String getSurname() {
		return this.surname;
	}
	

  
    /**  
     * Set the value related to the column: surname.
	 * @param surname the surname value you wish to set
	 */
	public void setSurname(final String surname) {
		this.surname = surname;
	}


    /**
     * Return the value associated with the column: movie.
	 * @return A Set&lt;Movie&gt; object (this.movie)
	 */
	@Column( nullable = false  )
 	@OneToMany( cascade = CascadeType.ALL, mappedBy = "director"  )
	public Set<Movie> getMovie() {
		return this.movie;
	}
	
	/**
	 * Adds a bi-directional link of type Movie to the movie set.
	 * @param movie item to add
	 */
	public void addMovie(Movie movie) {
		this.movie.add(movie);
		movie.setDirector(this);
	}

  
    /**  
     * Set the value related to the column: movie.
	 * @param movie the movie value you wish to set
	 */
	public void setMovie(final Set<Movie> movie) {
		this.movie = movie;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Director clone() throws CloneNotSupportedException {
		super.clone();  // keep hierarchy
        final Director copy = new Director();

		copy.setDob(this.getDob());
		copy.setId(this.getId());
		copy.setName(this.getName());
		copy.setSurname(this.getSurname());
		copy.getMovie().addAll(this.getMovie());
		return copy;
	}


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("dob: " + this.dob + ", ");
		sb.append("id: " + this.id + ", ");
		sb.append("name: " + this.name + ", ");
		sb.append("surname: " + this.surname + ", ");
		return sb.toString();		
	}


	
	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		if ( this == aThat ) {
			 return true;
		}
		if ((aThat == null) || ( !(aThat instanceof Director))) {
			 return false;
		}
		final Director that = (Director) aThat;
		
		return (((this.dob == null) && (that.dob == null)) 
			   || (this.dob != null  && this.dob.equals(that.dob)))
			   && 
			(((this.id == null) && (that.id == null)) 
			   || (this.id != null  && this.id.equals(that.id)))
			   && 
			(((this.name == null) && (that.name == null)) 
			   || (this.name != null  && this.name.equals(that.name)))
			   && 
			(((this.surname == null) && (that.surname == null)) 
			   || (this.surname != null  && this.surname.equals(that.surname)))
			   && 
			(((this.movie == null) && (that.movie == null)) 
			   || (this.movie != null  && this.movie.equals(that.movie)))
			   ;
	}


	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		int result = 0;
		result = 1000003 * result + (this.dob == null ? 0 : this.dob.hashCode());
		result = 1000003 * result + (this.id == null ? 0 : this.id.hashCode());
		result = 1000003 * result + (this.name == null ? 0 : this.name.hashCode());
		result = 1000003 * result + (this.surname == null ? 0 : this.surname.hashCode());
		result = 1000003 * result + (this.movie == null ? 0 : this.movie.hashCode());

		return result;  
	}
}