<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >
<sqlMap namespace="custom_shelf" >

  <resultMap id="shelfItemMap" class="com.tamuvii.pojo.ShelfItem" >
    <result column="movie" property="movie" jdbcType="INTEGER" />
    <result column="duration" property="duration" jdbcType="VARCHAR" />
    <result column="original_title" property="originalTitle" jdbcType="VARCHAR" />
    <result column="original_plot" property="originalPlot" jdbcType="VARCHAR" />
    <result column="original_image" property="originalImage" jdbcType="VARCHAR" />
    <result column="localized_title" property="localizedTitle" jdbcType="VARCHAR" />
    <result column="localized_plot" property="localizedPlot" jdbcType="VARCHAR" />
    <result column="localized_image" property="localizedImage" jdbcType="VARCHAR" />
    <result column="directorId" property="directorId" jdbcType="INTEGER" />
    <result column="director" property="director" jdbcType="VARCHAR" />
    <result column="release_date" property="releaseDate" jdbcType="TIMESTAMP" />
    <result column="date_added" property="dateAdded" jdbcType="TIMESTAMP" />
    <result column="date_viewed" property="dateViewed" jdbcType="TIMESTAMP" />
    <result column="mark" property="mark" jdbcType="INTEGER" />
    <result column="numUsers" property="numUsers" jdbcType="INTEGER" />
    <result column="review" property="review" jdbcType="INTEGER" />
    <result column="title" property="reviewTitle" jdbcType="VARCHAR" />
    <result column="review_text" property="reviewText" jdbcType="VARCHAR" />
  </resultMap>
  
  <resultMap id="personalMovieIdAndWishedFlag" class="com.tamuvii.pojo.PersonalMovieIdAndWishedFlag" >
	    <result column="movie" property="movie" jdbcType="INTEGER" />
	    <result column="wished" property="wished" jdbcType="VARCHAR" />
  </resultMap>
  
  <resultMap id="shelfDirectorReport" class="com.tamuvii.pojo.ShelfDirectorReport" >
	    <result column="director" property="director" jdbcType="INTEGER" />
	    <result column="name" property="name" jdbcType="VARCHAR" />
	    <result column="surname" property="surname" jdbcType="VARCHAR" />
	    <result column="aka" property="aka" jdbcType="VARCHAR" />
	    <result column="numMovies" property="numMovies" jdbcType="INTEGER" />
  </resultMap>
  

  
  <!-- 
  
  Query di selezione shelf con filtro sul locale e numero di utenti corrispondenti per ogni film -->
  
  <select id="getShelfByUsername" resultMap="shelfItemMap" parameterClass="java.lang.String" >
  		select				m.movie, 
							m.duration, 
							m.original_title,
							m.original_plot,
							m.original_image,
							loc.localized_title,
							loc.localized_plot,
							loc.localized_image,
							d.director as directorId, 
							CONCAT(d.name, " ", d.surname) as director, 
							m.release_date, 
							um.date_added, 
							um.date_viewed, 
							um.mark,
							(select count(*) from user_to_movie um2 inner join app_user au on au.username = um2.username where um2.movie = m.movie and au.country = 'IT') as numUsers,
							r.review,
							r.title,
							r.review_text
							
		from 				user_to_movie um			inner join movie m
							on um.movie = m.movie 		inner join director d
							on d.director = m.director 	inner join app_user u
							on u.username = um.username left join localized_data loc
							on (loc.movie = m.movie and loc.locale like concat('%', u.country, '%'))	left join review r
							on r.movie = um.movie and r.username = #username#
							
		where				u.username = #username#
		and					um.wished = '0'

		group by um.movie
  </select>
  
  
  <select id="getWishedMoviesByUsername" resultMap="shelfItemMap" parameterClass="java.lang.String" >
		select				m.movie, 
							m.duration, 
							m.original_title,
							m.original_plot,
							m.original_image,
							loc.localized_title,
							loc.localized_plot,
							loc.localized_image,
							d.director as directorId, 
							CONCAT(d.name, " ", d.surname) as director, 
							m.release_date, 
							um.date_added, 
							um.date_viewed, 
							um.mark,
							(select count(*) from user_to_movie um2 inner join app_user au on au.username = um2.username where um2.movie = m.movie and au.country = 'IT') as numUsers,
							r.review,
							r.title,
							r.review_text
							
		from 				user_to_movie um			inner join movie m
							on um.movie = m.movie 		inner join director d
							on d.director = m.director 	inner join app_user u
							on u.username = um.username left join localized_data loc
							on loc.movie = m.movie 		left join review r
							on r.movie = um.movie and r.username = #username#
							
		where				u.username = #username#
		and					um.wished = '1'
  </select>
  
  <select id="getPersonalMoviesIds" resultClass="java.lang.Integer" parameterClass="java.lang.String" >
  		select			um.movie
		from			user_to_movie um
		where			um.username = #username#
  </select>
  
  <select id="getShelfMoviesIds" resultClass="java.lang.Integer" parameterClass="java.lang.String" >
  		select			um.movie
		from			user_to_movie um
		where			um.username = #username#
		and				um.wished = '0'
  </select>
  
  <select id="getWishedMoviesIds" resultClass="java.lang.Integer" parameterClass="java.lang.String" >
  		select			um.movie
		from			user_to_movie um
		where			um.username = #username#
		and				um.wished = '1'
  </select>
  
  <select id="getPersonalMoviesIdsAndWishedFlags" resultMap="personalMovieIdAndWishedFlag" parameterClass="java.lang.String" >
  		select			um.movie,
  						um.wished
		from			user_to_movie um
		where			um.username = #username#
  </select>


	<select id="getShelfDirectorReport" resultMap="shelfDirectorReport"	parameterClass="com.tamuvii.pojo.queryfilter.ShelfDirectorReportFilter">
		select 			d.director,
						d.name,
						d.surname,
						d.aka,
						count(distinct um.movie) as numMovies

		from 			user_to_movie um 		inner join 		movie m
						on um.movie = m.movie 	inner join 		director d
						on m.director = d.director

		where			um.username = #username# 
		and				um.wished = '0'

		group by m.director
		
		<isNull property="orderAttribute">
			order by numMovies desc
		</isNull>
		<isNotNull property="orderAttribute">
			order by $orderAttribute$ desc
		</isNotNull>
		
		
		<isNotNull property="from">
			limit #from#, #to#
		</isNotNull>
  </select>
  
  <select id="getShelfDirectorReportCount" resultClass="java.lang.Integer" parameterClass="java.lang.String" >
  		select 			count(distinct d.director)

		from 			user_to_movie um 		inner join 		movie m
						on um.movie = m.movie 	inner join 		director d
						on m.director = d.director

		where 			um.username = #username#
		and				um.wished = '0'
  </select>
  
  
  <select id="getShelfByFilter" resultMap="shelfItemMap" parameterClass="com.tamuvii.pojo.queryfilter.ShelfItemFilter" >
  		select				m.movie, 
							m.duration, 
							m.original_title,
							m.original_plot,
							m.original_image,
							loc.localized_title,
							loc.localized_plot,
							loc.localized_image,
							d.director as directorId, 
							CONCAT(d.name, " ", d.surname) as director, 
							m.release_date, 
							um.date_added, 
							um.date_viewed, 
							um.mark,
							(select count(*) from user_to_movie um2 inner join app_user au on au.username = um2.username where um2.movie = m.movie and au.country = u.country) as numUsers,
							r.review,
							r.title,
							r.review_text
							
		from 				user_to_movie um			inner join movie m
							on um.movie = m.movie 		inner join director d
							on d.director = m.director 	inner join app_user u
							on u.username = um.username left join localized_data loc
							on (loc.movie = m.movie and loc.locale like concat('%', u.country, '%'))	left join review r
							on r.movie = um.movie and r.username = #username#
							
		where				u.username = #username#
		<isNotNull property="director" prepend="and">
			d.director = #director#
		</isNotNull>
		and					um.wished = '0'

		group by um.movie
		
		<isNotNull property="orderAttribute">
			order by $orderAttribute$ $orderCriteria$
		</isNotNull>
		
  </select>
  
</sqlMap>