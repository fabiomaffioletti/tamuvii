package com.tamuvii.model;

import java.io.Serializable;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;


/** 
 * Object mapping for hibernate-handled table: movie.
 * @author autogenerated
 */

@Entity
@Table(name = "movie", catalog = "tamuvii")
public  class Movie implements Cloneable, Serializable {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559009206L;


	/** Field mapping. */
	private Date date;
	/** Field mapping. */
	private Director director;
	/** Field mapping. */
	private String duration;
	/** Field mapping. */
	private Integer id = 0; // init for hibernate bug workaround
	/** Field mapping. */
	private Set<LocalizedMovieData> localizedMovieDate = new HashSet<LocalizedMovieData>();

	/** Field mapping. */
	private Set<Mark> mark = new HashSet<Mark>();

	/** Field mapping. */
	private Set<Actor> actor = new HashSet<Actor>();

	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Movie() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Movie(Integer id) {
		this.id = id;
	}
	
 


    /**
     * Return the value associated with the column: date.
	 * @return A Date object (this.date)
	 */
	
	public Date getDate() {
		return this.date;
	}
	

  
    /**  
     * Set the value related to the column: date.
	 * @param date the date value you wish to set
	 */
	public void setDate(final Date date) {
		this.date = date;
	}


    /**
     * Return the value associated with the column: director.
	 * @return A Director object (this.director)
	 */
	
	@ManyToOne( cascade = CascadeType.ALL )
	@JoinColumn(name = "director", nullable = true  )
	public Director getDirector() {
		return this.director;
	}
	

  
    /**  
     * Set the value related to the column: director.
	 * @param director the director value you wish to set
	 */
	public void setDirector(final Director director) {
		this.director = director;
	}


    /**
     * Return the value associated with the column: duration.
	 * @return A String object (this.duration)
	 */
	@Column( length = 20  )
	public String getDuration() {
		return this.duration;
	}
	

  
    /**  
     * Set the value related to the column: duration.
	 * @param duration the duration value you wish to set
	 */
	public void setDuration(final String duration) {
		this.duration = duration;
	}


    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@Column( name = "movie", nullable = false  )
	@GeneratedValue(strategy = GenerationType.AUTO)
	public Integer getId() {
		return this.id;
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		this.id = id;
	}


    /**
     * Return the value associated with the column: localizedMovieData.
	 * @return A Set&lt;LocalizedMovieData&gt; object (this.localizedMovieData)
	 */
	@Column( nullable = false  )
 	@OneToMany( cascade = CascadeType.ALL, mappedBy = "movie"  )
	public Set<LocalizedMovieData> getLocalizedMovieDate() {
		return this.localizedMovieDate;
	}
	
	/**
	 * Adds a bi-directional link of type LocalizedMovieData to the localizedMovieDate set.
	 * @param localizedMovieData item to add
	 */
	public void addLocalizedMovieData(LocalizedMovieData localizedMovieData) {
		this.localizedMovieDate.add(localizedMovieData);
		localizedMovieData.setMovie(this);
	}

  
    /**  
     * Set the value related to the column: localizedMovieData.
	 * @param localizedMovieData the localizedMovieData value you wish to set
	 */
	public void setLocalizedMovieDate(final Set<LocalizedMovieData> localizedMovieData) {
		this.localizedMovieDate = localizedMovieData;
	}


    /**
     * Return the value associated with the column: mark.
	 * @return A Set&lt;Mark&gt; object (this.mark)
	 */
	@Column( nullable = false  )
 	@OneToMany( cascade = CascadeType.ALL, mappedBy = "movie"  )
	public Set<Mark> getMark() {
		return this.mark;
	}
	
	/**
	 * Adds a bi-directional link of type Mark to the mark set.
	 * @param mark item to add
	 */
	public void addMark(Mark mark) {
		this.mark.add(mark);
		mark.setMovie(this);
	}

  
    /**  
     * Set the value related to the column: mark.
	 * @param mark the mark value you wish to set
	 */
	public void setMark(final Set<Mark> mark) {
		this.mark = mark;
	}


    /**
     * Return the value associated with the column: actor.
	 * @return A Set&lt;Actor&gt; object (this.actor)
	 */
	
	@ManyToMany(cascade = { CascadeType.PERSIST, CascadeType.MERGE } )
	@JoinTable(
		name = "movie_to_actor",
		joinColumns = {@JoinColumn(name = "movie")},
		inverseJoinColumns = {@JoinColumn(name = "actor")}
	)
	public Set<Actor> getActor() {
		return this.actor;
	}
	
	/**
	 * Adds a bi-directional link of type Actor to the set.
	 * 
	 * @param actor item to add
	 */
	public void addActor(Actor actor) {
		this.actor.add(actor);
		actor.getMovie().add(this);
	}

  
    /**  
     * Set the value related to the column: actor.
	 * @param actor the actor value you wish to set
	 */
	public void setActor(final Set<Actor> actor) {
		this.actor = actor;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Movie clone() throws CloneNotSupportedException {
		super.clone();  // keep hierarchy
        final Movie copy = new Movie();

		copy.setDate(this.getDate());
		copy.setDirector(this.getDirector());
		copy.setDuration(this.getDuration());
		copy.setId(this.getId());
		copy.getLocalizedMovieDate().addAll(this.getLocalizedMovieDate());
		copy.getMark().addAll(this.getMark());
		copy.getActor().addAll(this.getActor());
		return copy;
	}


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("date: " + this.date + ", ");
		sb.append("duration: " + this.duration + ", ");
		sb.append("id: " + this.id + ", ");
		return sb.toString();		
	}


	
	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		if ( this == aThat ) {
			 return true;
		}
		if ((aThat == null) || ( !(aThat instanceof Movie))) {
			 return false;
		}
		final Movie that = (Movie) aThat;
		
		return (((this.date == null) && (that.date == null)) 
			   || (this.date != null  && this.date.equals(that.date)))
			   && 
			(((this.director == null) && (that.director == null)) 
			   || (this.director != null  && this.director.equals(that.director)))
			   && 
			(((this.duration == null) && (that.duration == null)) 
			   || (this.duration != null  && this.duration.equals(that.duration)))
			   && 
			(((this.id == null) && (that.id == null)) 
			   || (this.id != null  && this.id.equals(that.id)))
			   && 
			(((this.localizedMovieDate == null) && (that.localizedMovieDate == null)) 
			   || (this.localizedMovieDate != null  && this.localizedMovieDate.equals(that.localizedMovieDate)))
			   && 
			(((this.mark == null) && (that.mark == null)) 
			   || (this.mark != null  && this.mark.equals(that.mark)))
			   && 
			(((this.actor == null) && (that.actor == null)) 
			   || (this.actor != null  && this.actor.equals(that.actor)))
			   ;
	}


	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		int result = 0;
		result = 1000003 * result + (this.date == null ? 0 : this.date.hashCode());
		result = 1000003 * result + (this.duration == null ? 0 : this.duration.hashCode());
		result = 1000003 * result + (this.id == null ? 0 : this.id.hashCode());
		result = 1000003 * result + (this.localizedMovieDate == null ? 0 : this.localizedMovieDate.hashCode());
		result = 1000003 * result + (this.mark == null ? 0 : this.mark.hashCode());

		return result;  
	}
}